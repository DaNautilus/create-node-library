{"code":"var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport chalk from 'chalk';\r\nimport execa from 'execa';\r\nimport fs from 'fs';\r\nimport Listr from 'listr';\r\nimport ncp from 'ncp';\r\nimport path from 'path';\r\nimport { projectInstall } from 'pkg-install';\r\nimport { promisify } from 'util';\r\nvar access = promisify(fs.access);\r\nvar copy = promisify(ncp);\r\nexport var copyTemplateFiles = function (options) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    return tslib_1.__generator(this, function (_a) {\r\n        return [2 /*return*/, copy(options.templateDirectory, options.targetDirectory, { clobber: false })];\r\n    });\r\n}); };\r\nexport var initGit = function (options) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var response;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4 /*yield*/, execa('git', ['init'], { cwd: options.targetDirectory })];\r\n            case 1:\r\n                response = _a.sent();\r\n                if (response.failed) {\r\n                    return [2 /*return*/, Promise.reject(new Error('Failed to initialize Git'))];\r\n                }\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\nexport var createProject = function (providedOptions) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var templateDirectory, targetPath, targetDirectory, options, error_1, error_2, tasks;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                console.log('bububububu 1', __dirname);\r\n                templateDirectory = path.resolve(__dirname, '../templates', providedOptions.template.toLowerCase());\r\n                console.log('bububububu 2');\r\n                targetPath = providedOptions.targetDirectory || process.cwd();\r\n                targetDirectory = path.resolve(targetPath, providedOptions.projectName);\r\n                options = tslib_1.__assign({}, providedOptions, { targetDirectory: targetDirectory,\r\n                    templateDirectory: templateDirectory });\r\n                _a.label = 1;\r\n            case 1:\r\n                _a.trys.push([1, 3, , 4]);\r\n                return [4 /*yield*/, access(options.templateDirectory, fs.constants.F_OK)];\r\n            case 2:\r\n                _a.sent();\r\n                return [3 /*break*/, 4];\r\n            case 3:\r\n                error_1 = _a.sent();\r\n                fs.mkdirSync(options.templateDirectory);\r\n                return [3 /*break*/, 4];\r\n            case 4:\r\n                _a.trys.push([4, 6, , 7]);\r\n                return [4 /*yield*/, access(options.templateDirectory, fs.constants.R_OK)];\r\n            case 5:\r\n                _a.sent();\r\n                return [3 /*break*/, 7];\r\n            case 6:\r\n                error_2 = _a.sent();\r\n                console.error('%s Invalid template name', chalk.red.bold('ERROR'));\r\n                process.exit(1);\r\n                return [3 /*break*/, 7];\r\n            case 7:\r\n                tasks = new Listr([\r\n                    {\r\n                        title: 'Copy project files',\r\n                        task: function () { return copyTemplateFiles(options); },\r\n                    },\r\n                    {\r\n                        title: 'Initialize git',\r\n                        task: function () { return initGit(options); },\r\n                        enabled: function () { return options.git; },\r\n                    },\r\n                    {\r\n                        title: 'Install dependencies',\r\n                        task: function () { return projectInstall({ cwd: options.targetDirectory }); },\r\n                        skip: function () { return !options.runInstall ? 'Pass --install to automatically install dependencies' : undefined; },\r\n                    },\r\n                ]);\r\n                return [4 /*yield*/, tasks.run()];\r\n            case 8:\r\n                _a.sent();\r\n                console.log('% Your project is ready, have fun!', chalk.green.bold('DONE'));\r\n                return [2 /*return*/, true];\r\n        }\r\n    });\r\n}); };\r\n","references":["/Users/bobby/Documents/private/create-node-library/node_modules/chalk/types/index.d.ts","/Users/bobby/Documents/private/create-node-library/node_modules/@types/execa/index.d.ts","/Users/bobby/Documents/private/create-node-library/node_modules/listr/index.js","/Users/bobby/Documents/private/create-node-library/node_modules/ncp/lib/ncp.js","/Users/bobby/Documents/private/create-node-library/node_modules/pkg-install/lib/index.d.ts"],"dts":{"name":"/Users/bobby/Documents/private/create-node-library/.tmp/main.d.ts","writeByteOrderMark":false,"text":"export declare const copyTemplateFiles: (options: any) => Promise<any>;\r\nexport declare const initGit: (options: any) => Promise<never>;\r\nexport declare const createProject: (providedOptions: any) => Promise<boolean>;\r\n"}}
