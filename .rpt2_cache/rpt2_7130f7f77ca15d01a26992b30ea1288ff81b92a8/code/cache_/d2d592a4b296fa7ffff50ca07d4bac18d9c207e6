{"code":"var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport arg from 'arg';\r\nimport inquirer from 'inquirer';\r\nimport { createProject } from './main';\r\nvar parseArgumentsToOptions = function (rawArguments) {\r\n    var args = arg({\r\n        '--yes': Boolean,\r\n        '--git': Boolean,\r\n        '--install': Boolean,\r\n        '-y': '--yes',\r\n        '-g': '--git',\r\n        '-i': '--install',\r\n    }, {\r\n        argv: rawArguments.slice(2),\r\n    });\r\n    return {\r\n        skipPrompts: args['--yes'] || false,\r\n        git: args['--git'] || false,\r\n        runInstall: args['--install'] || false,\r\n        projectName: args._[0],\r\n        template: args._[1],\r\n    };\r\n};\r\nvar promptForMissingOptions = function (options) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var defaultProjectName, defaultTemplate, questions, answers;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                defaultProjectName = 'node-library';\r\n                defaultTemplate = 'TypeScript';\r\n                if (options.skipPrompts) {\r\n                    return [2 /*return*/, tslib_1.__assign({}, options, { projectName: options.projectName || defaultProjectName, template: options.template || defaultTemplate })];\r\n                }\r\n                questions = [];\r\n                if (!options.projectName) {\r\n                    questions.push({\r\n                        type: 'input',\r\n                        name: 'projectName',\r\n                        message: 'Please name your new project',\r\n                        default: defaultProjectName,\r\n                    });\r\n                }\r\n                if (!options.template) {\r\n                    questions.push({\r\n                        type: 'list',\r\n                        name: 'template',\r\n                        message: 'Please choose which template you want to use',\r\n                        choices: ['TypeScript'],\r\n                        default: defaultTemplate,\r\n                    });\r\n                }\r\n                return [4 /*yield*/, inquirer.prompt(questions)];\r\n            case 1:\r\n                answers = _a.sent();\r\n                return [2 /*return*/, tslib_1.__assign({}, options, { projectName: options.projectName || answers.projectName, template: options.template || defaultTemplate })];\r\n        }\r\n    });\r\n}); };\r\nexport var cli = function (args) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var parsedOptions, options;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                parsedOptions = parseArgumentsToOptions(args);\r\n                return [4 /*yield*/, promptForMissingOptions(parsedOptions)];\r\n            case 1:\r\n                options = _a.sent();\r\n                return [4 /*yield*/, createProject(options)];\r\n            case 2:\r\n                _a.sent();\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\n","references":["/Users/bobby/Documents/private/create-node-library/node_modules/arg/index.d.ts","/Users/bobby/Documents/private/create-node-library/node_modules/inquirer/lib/inquirer.js","/Users/bobby/Documents/private/create-node-library/src/main.ts"],"dts":{"name":"/Users/bobby/Documents/private/create-node-library/.tmp/cli.d.ts","writeByteOrderMark":false,"text":"export declare const cli: (args: any) => Promise<void>;\r\n"}}
