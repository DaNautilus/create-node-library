{"code":"var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport chalk from 'chalk';\r\nimport fs from 'fs';\r\nimport { promisify } from 'util';\r\nvar access = promisify(fs.access);\r\nexport var checkDirectories = function (directoryOptions) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    var error_1, error_2;\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 2, , 3]);\r\n                return [4 /*yield*/, access(directoryOptions.templateDirectory, fs.constants.F_OK)];\r\n            case 1:\r\n                _a.sent();\r\n                return [3 /*break*/, 3];\r\n            case 2:\r\n                error_1 = _a.sent();\r\n                fs.mkdirSync(directoryOptions.templateDirectory);\r\n                return [3 /*break*/, 3];\r\n            case 3:\r\n                _a.trys.push([3, 5, , 6]);\r\n                return [4 /*yield*/, access(directoryOptions.templateDirectory, fs.constants.R_OK)];\r\n            case 4:\r\n                _a.sent();\r\n                return [3 /*break*/, 6];\r\n            case 5:\r\n                error_2 = _a.sent();\r\n                console.error('%s Invalid template name', chalk.red.bold('ERROR'));\r\n                process.exit(1);\r\n                return [3 /*break*/, 6];\r\n            case 6: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\r\n","references":["/Users/bobby/Documents/private/create-node-library/node_modules/chalk/types/index.d.ts"],"dts":{"name":"/Users/bobby/Documents/private/create-node-library/.tmp/project/check-directories.d.ts","writeByteOrderMark":false,"text":"export declare const checkDirectories: (directoryOptions: any) => Promise<void>;\r\n"}}
