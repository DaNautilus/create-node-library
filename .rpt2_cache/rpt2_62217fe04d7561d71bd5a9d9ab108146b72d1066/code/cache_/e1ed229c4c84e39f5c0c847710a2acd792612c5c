{"code":"import chalk from 'chalk';\r\nimport execa from 'execa';\r\nimport fs from 'fs';\r\nimport Listr from 'listr';\r\nimport ncp from 'ncp';\r\nimport path from 'path';\r\nimport { projectInstall } from 'pkg-install';\r\nimport { promisify } from 'util';\r\nconst access = promisify(fs.access);\r\nconst copy = promisify(ncp);\r\nexport const copyTemplateFiles = async (options) => {\r\n    return copy(options.templateDirectory, options.targetDirectory, { clobber: false });\r\n};\r\nexport const initGit = async (options) => {\r\n    const response = await execa('git', ['init'], { cwd: options.targetDirectory });\r\n    if (response.failed) {\r\n        return Promise.reject(new Error('Failed to initialize Git'));\r\n    }\r\n};\r\nexport const createProject = async (providedOptions) => {\r\n    const currentFileUrl = import.meta.url;\r\n    const templateDirectory = path.resolve(new URL(currentFileUrl).pathname, '../../templates', options.template.toLowerCase());\r\n    const options = {\r\n        ...providedOptions,\r\n        targetDirectory: options.targetDirectory || process.cwd(),\r\n        templateDirectory = templateDirectory,\r\n    };\r\n    try {\r\n        await access(options.templateDirectory, fs.constants.R_OK);\r\n    }\r\n    catch (error) {\r\n        console.error('%s Invalid template name', chalk.red.bold('ERROR'));\r\n        process.exit(1);\r\n    }\r\n    const tasks = new Listr([\r\n        {\r\n            title: 'Copy project files',\r\n            task: () => copyTemplateFiles(options),\r\n        },\r\n        {\r\n            title: 'Initialize git',\r\n            task: () => initGit(options),\r\n            enabled: () => options.git,\r\n        },\r\n        {\r\n            title: 'Install dependencies',\r\n            task: () => projectInstall({ cwd: options.targetDirectory }),\r\n            skip: () => !options.runInstall ? 'Pass --install to automatically install dependencies' : undefined,\r\n        },\r\n    ]);\r\n    await tasks.run();\r\n    console.log('% Your project is ready, have fun!', chalk.green.bold('DONE'));\r\n    return true;\r\n};\r\n","references":["/Users/bobby/Documents/private/create-node-library/node_modules/chalk/types/index.d.ts","/Users/bobby/Documents/private/create-node-library/node_modules/@types/execa/index.d.ts","/Users/bobby/Documents/private/create-node-library/node_modules/listr/index.js","/Users/bobby/Documents/private/create-node-library/node_modules/ncp/lib/ncp.js","/Users/bobby/Documents/private/create-node-library/node_modules/pkg-install/lib/index.d.ts"],"dts":{"name":"/Users/bobby/Documents/private/create-node-library/.tmp/main.d.ts","writeByteOrderMark":false,"text":"export declare const copyTemplateFiles: (options: any) => Promise<any>;\r\nexport declare const initGit: (options: any) => Promise<never>;\r\nexport declare const createProject: (providedOptions: any) => Promise<boolean>;\r\n"}}
